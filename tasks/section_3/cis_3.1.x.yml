---
- name: "3.1.1 | Ensure system is checked to determine if IPv6 is enabled"
  block:
    - name: "3.1.1 | Ensure system is checked to determine if IPv6 is enabled | Replace ipv6.disable if it exists"
      replace:
        path: /etc/default/grub
        regexp: '^(GRUB_CMDLINE_LINUX=.*)\bipv6\.disable=\d\b(.*$)'
        replace: '\1ipv6.disable=1\2'
      when: cis_ipv6_disable == 'grub'
      register: ipv6disable_replaced
      notify: Grub update

    - name: "3.1.1 | Ensure system is checked to determine if IPv6 is enabled | Check grub cmdline linux"
      shell: grep "GRUB_CMDLINE_LINUX=" /etc/default/grub | cut -f2 -d'"'
      changed_when: false
      failed_when: false
      check_mode: false
      register: cis_3_1_1_cmdline_settings

    - name: "3.1.1 | Ensure system is checked to determine if IPv6 is enabled | Insert ipv6.disable if it doesn't exist"
      lineinfile:
        path: /etc/default/grub
        regexp: '^(GRUB_CMDLINE_LINUX=".*)"$'
        line: '\1 ipv6.disable=1"'
        backrefs: true
      when:
        - cis_ipv6_disable == 'grub'
        - ipv6disable_replaced is not changed
        - "'ipv6.disable' not in cis_3_1_1_cmdline_settings.stdout"
      notify: Grub update

    - name: "3.1.1 | Ensure system is checked to determine if IPv6 is enabled | Remove net.ipv6.conf.all.disable_ipv6"
      template:
        src: "{{ item }}.j2"
        dest: "/{{ item }}"
        owner: root
        group: root
        mode: "0640"
      notify: Flush ipv6 route table
      loop:
        - etc/sysctl.d/60-disable_ipv6.conf
      when: cis_ipv6_disable == 'sysctl'
  when:
    - not cis_ipv6_required
  tags:
    - level1-server
    - level1-workstation
    - patch
    - 3.1.1
    - ipv6

- name: "3.1.2 | Ensure wireless interfaces are disabled"
  block:
    - name: "3.1.2 | Ensure wireless interfaces are disabled | Check for network-manager tool"
      shell: nmcli radio wifi
      changed_when: false
      failed_when: false
      check_mode: false
      register: cis_3_1_2_wifi_status
      when: "'network-manager' in ansible_facts.packages"

    - name: "3.1.2 | Ensure wireless interfaces are disabled | Disable wireless if network-manager installed"
      shell: nmcli radio all off
      changed_when: cis_3_1_2_nmcli_radio_off.rc == 0
      register: cis_3_1_2_nmcli_radio_off
      when:
        - "'network-manager' in ansible_facts.packages"
        - "'enabled' in cis_3_1_2_wifi_status.stdout"

    - name: "3.1.2 | Ensure wireless interfaces are disabled | Warn about wireless if network-manager not installed"
      debug:
        msg: "Warning!! You need to disable wireless interfaces manually since network-manager is not installed"
      when: "'network-manager' not in ansible_facts.packages"

    - name: "3.1.2 | Ensure wireless interfaces are disabled | Set warning count"
      import_tasks:
        file: warning_facts.yml
      when: "'network-manager' not in ansible_facts.packages"
  vars:
    warn_control_id: "3.1.2"
  tags:
    - level1-server
    - level2-workstation
    - automated
    - patch
    - 3.1.2
    - wireless

- name: 3.1.3 | Ensure bluetooth services are not in use
  block:
    - name: 3.1.3 | Ensure bluetooth services are not in use | Check bluetooth.service
      shell: "systemctl show bluetooth.service | grep LoadState | cut -d = -f 2"
      register: cis_bluetooth_service_status
      changed_when: false
      check_mode: false

    - name: 3.1.3 | Ensure bluetooth services are not in use | Stop bluetooth.service
      service:
        name: bluetooth.service
        state: stopped
        enabled: false
      when: cis_bluetooth_service_status.stdout != "not-found"

    - name: 3.1.3 | Ensure bluetooth services are not in use | Purge bluetooth bluez package
      apt:
        name: bluez
        state: absent
        purge: "{{ cis_purge_apt_bluez }}"
  tags:
    - level1-server
    - level2-workstation
    - automated
    - patch
    - 3.1.3
    - bluetooth
