---
- name: "5.4.1.1 | Ensure password expiration is configured"
  block:
    - name: "5.4.1.1 | Ensure password expiration is configured | Set /etc/login.defs PASS_MAX_DAYS"
      lineinfile:
        path: /etc/login.defs
        regexp: "^PASS_MAX_DAYS|^#PASS_MAX_DAYS"
        line: "PASS_MAX_DAYS {{ cis_pass.max_days }}"
        insertafter: "# Password aging controls"

    - name: "5.4.1.1 | Ensure password expiration is configured | Configure for existing users"
      command: chage --maxdays {{ cis_pass.max_days }} {{ item }}
      loop: "{{ chage_list_of_users }}"
      when:
        - cis_disruption_high
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.1.1
    - user
    - login

- name: "5.4.1.2 | Ensure minimum password age is configured"
  block:
    - name: "5.4.1.2 | Ensure minimum password age is configured | Set /etc/login.defs PASS_MIN_DAYS"
      lineinfile:
        path: /etc/login.defs
        regexp: "^PASS_MIN_DAYS|^#PASS_MIN_DAYS"
        line: "PASS_MIN_DAYS {{ cis_pass.min_days }}"

    - name: "5.4.1.2 | Ensure minimum password age is configured | Configure existing users"
      command: chage --mindays {{ cis_pass.min_days }} {{ item }}
      loop: "{{ chage_list_of_users }}"
      when:
        - cis_disruption_high
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.1.2
    - user
    - login

- name: "5.4.1.3 | Ensure password expiration warning days is configured"
  block:
    - name: "5.4.1.3 | Ensure password expiration warning days is configured | Set /etc/login.defs PASS_WARN_AGE"
      lineinfile:
        path: /etc/login.defs
        regexp: "^PASS_WARN_AGE|^#PASS_WARN_AGE"
        line: "PASS_WARN_AGE {{ cis_pass.warn_age }}"

    - name: "5.4.1.3 | Ensure password expiration warning days is configured | Configure existing users"
      command: chage --warndays {{ cis_pass.warn_age }} {{ item }}
      loop: "{{ chage_list_of_users }}"
      when:
        - cis_disruption_high
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.1.3
    - user
    - login

- name: "5.4.1.4 | Ensure strong password hashing algorithm is configured"
  lineinfile:
    path: /etc/login.defs
    regexp: "^ENCRYPT_METHOD|^#ENCRYPT_METHOD"
    line: "ENCRYPT_METHOD {{ cis_passwd_hash_algo }}"
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.1.4
    - user
    - login

- name: "5.4.1.5 | Ensure inactive password lock is configured"
  block:
    - name: "5.4.1.5 | Ensure inactive password lock is configured | General setting"
      shell: useradd -D | grep INACTIVE | cut -d= -f2
      changed_when: false
      failed_when: false
      register: cis_5_4_1_5_inactive_setting

    - name: "5.4.1.5 | Ensure inactive password lock is configured | Set inactive period for new users"
      shell: useradd -D -f {{ cis_pass.inactive }}
      failed_when: false
      when: cis_5_4_1_5_inactive_setting.stdout != cis_pass.inactive | string

    - name: "5.4.1.5 | Ensure inactive password lock is configured | Get Individual users"
      shell: "awk -F: '(/^[^:]+:[^!*]/ && ($7~/(\\s*|-1)/ || ( $7>1 && $7<{{ cis_pass.inactive }}))) {print $1}' /etc/shadow"
      changed_when: false
      failed_when: false
      register: cis_5_4_1_5_inactive_users

    - name: "5.4.1.5 | Ensure inactive password lock is configured | Set inactive period for existing users"
      shell: chage --inactive {{ cis_pass.inactive }} {{ item }}
      failed_when: false
      with_items:
        - "{{ cis_passwd | map(attribute='id') | list | intersect(cis_5_4_1_5_inactive_users.stdout_lines) | list }}"
      when:
        - cis_disruption_high
        - cis_5_4_1_5_inactive_users.stdout | length > 0
        - (item != 'root') and (not cis_uses_root)
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.1.5
    - user
    - login

- name: "5.4.1.6 | Ensure all users last password change date is in the past"
  block:
    - name: "5.4.1.6 | Ensure all users last password change date is in the past | Get current date in Unix Time"
      shell: echo $(($(date --utc --date "$1" +%s)/86400))
      changed_when: false
      failed_when: false
      check_mode: false
      register: cis_5_4_1_6_current_time

    - name: "5.4.1.6 | Ensure all users last password change date is in the past | Get list of users with last changed PW date in future"
      shell: "cat /etc/shadow | awk -F: '{if($3>{{ cis_5_4_1_6_current_time.stdout }})print$1}'"
      changed_when: false
      failed_when: false
      check_mode: false
      register: cis_5_4_1_6_user_list

    - name: "5.4.1.6 | Ensure all users last password change date is in the past | Warn about users"
      debug:
        msg:
          - "WARNING!! The following accounts have the last PW change date in the future"
          - "{{ cis_5_4_1_6_user_list.stdout_lines }}"
      when: cis_5_4_1_6_user_list.stdout | length > 0

    - name: "5.4.1.6 | Ensure all users last password change date is in the past | warn_count"
      import_tasks:
        file: warning_facts.yml
      when: cis_5_4_1_6_user_list.stdout | length > 0

    - name: "5.4.1.6 | Ensure all users last password change date is in the past | Lock accounts with future PW changed dates"
      shell: passwd --expire {{ item }}
      failed_when: false
      with_items:
        - "{{ cis_5_4_1_6_user_list.stdout_lines }}"
      when:
        - cis_disruption_high
        - cis_5_4_1_6_user_list.stdout | length > 0
  vars:
    warn_control_id: "5.4.1.6"
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.1.6
    - user
    - login

- name: "5.4.2.1 | Ensure root is the only UID 0 account"
  user:
    name: root
    uid: 0
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.2.1
    - user
    - login

- name: "5.4.2.2 | Ensure root is the only GID 0 account"
  user:
    name: root
    group: root
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.2.2
    - user
    - system

- name: "5.4.2.3 | Ensure group root is the only GID 0 group"
  group:
    name: root
    gid: 0
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.2.3
    - user
    - login

- name: "5.4.2.4 | Ensure root password is set"
  block:
    - name: "5.4.2.4 | Ensure root password is set | Check if root password is set"
      shell: |
        passwd -S root | awk '$2 ~ /^P/ {print "User: \"" $1 "\" Password is set"}'
      changed_when: false
      register: cis_5_4_2_4_is_root_password_set

    - name: "5.4.2.4 | Ensure root password is set | Warn if no password is set"
      debug:
        msg:
          - "WARNING!! root password is not set"
          - "Run 'passwd root' to fix this issue."
      when: '"Password is set" not in cis_5_4_2_4_is_root_password_set.stdout'

    - name: "5.4.2.4 | Ensure root password is set | warn_count"
      import_tasks:
        file: warning_facts.yml
      when: '"Password is set" not in cis_5_4_2_4_is_root_password_set.stdout'
  vars:
    warn_control_id: "5.4.2.4"
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.2.4
    - user
    - login

- name: "5.4.2.5 | Ensure root path integrity"
  block:
    - name: "5.4.2.5 | Ensure root path integrity | Get root's PATH"
      shell: env | grep '^PATH' | cut -d= -f2
      changed_when: false
      register: output

    - name: "5.4.2.5 | Ensure root path integrity | Set fact to variable root_path"
      set_fact:
        root_path: "{{ output.stdout }}"

    - name: "5.4.2.5 | Ensure root path integrity | Fail if contains a trailing colon"
      fail:
        msg: "The root PATH contains a trailing colon (:)"
      when: root_path.endswith(':')

    - name: "5.4.2.5 | Ensure root path integrity | Fail if contains an empty directory"
      fail:
        msg: "The variable 'root_path' contains an empty directory (::)."
      when: '"::" in root_path'

    - name: "5.4.2.5 | Ensure root path integrity | Fail if contains a current working directory"
      fail:
        msg: "The variable 'root_path' contains a current working directory (.)."
      when: '":.:" in root_path or root_path.startswith(".:") or root_path.endswith(":.")'

    - name: "5.4.2.5 | Ensure root path integrity | Analyze each element"
      block:
        - name: "5.4.2.5 | Ensure root path integrity | Analyze each element | Split root_path into parts"
          set_fact:
            root_path_parts: "{{ root_path.split(':') }}"

        - name: "5.4.2.5 | Ensure root path integrity | Analyze each element | Check ownership of each element"
          stat:
            path: "{{ item }}"
          with_items: "{{ root_path_parts }}"
          register: path_check

        - name: "5.4.2.5 | Ensure root path integrity | Analyze each element | Fail if any element is not owned by root"
          fail:
            msg: "The directory '{{ item.item }}' is not owned by root."
          when: item.stat.pw_name != 'root'
          with_items: "{{ path_check.results }}"

        - name: "5.4.2.5 | Ensure root path integrity | Analyze each element | Fail if any part is not a directory"
          fail:
            msg: "The path '{{ item.item }}' is not a directory."
          when: not item.stat.isdir
          with_items: "{{ path_check.results }}"

        - name: "5.4.2.5 | Ensure root path integrity | Analyze each element | Fail if any part has permissions less restrictive than 0755"
          fail:
            msg: "The directory '{{ item.item }}' has permissions less restrictive than 0755."
          when: (item.stat.mode | int(base=8)) > 755
          with_items: "{{ path_check.results }}"
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.2.5
    - user
    - login

- name: "5.4.2.6 | Ensure root user umask is configured"
  block:
    - name: 5.4.2.6 | Ensure root user umask is configured | Ensure umask is 0027 or more restrictive in /root/.bash_profile
      lineinfile:
        path: /root/.bash_profile
        state: present
        regexp: "^umask"
        line: "umask {{ cis_root_umask }}"
        create: yes

    - name: 5.4.2.6 | Ensure root user umask is configured | Ensure umask is 0027 or more restrictive in /root/.bashrc
      lineinfile:
        path: /root/.bashrc
        state: present
        regexp: "^umask"
        line: "umask {{ cis_root_umask }}"
        create: yes
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.2.6
    - user
    - login

- name: "5.4.2.7 | Ensure system accounts do not have a valid login shell"
  user:
    name: "{{ item }}"
    shell: /sbin/nologin
  with_items:
    - "{{ cis_passwd | selectattr('uid', '<', 1000) | map(attribute='id') | list }}"
  when:
    - item != "root"
    - item != "sync"
    - item != "shutdown"
    - item != "halt"
    - item != "nfsnobody"
    - cis_disruption_high
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.2.7
    - user
    - system

- name: "5.4.2.8 | Ensure system accounts are secured"
  user:
    name: "{{ item }}"
    password_lock: true
  with_items:
    - "{{ cis_passwd | selectattr('uid', '<', 1000) | map(attribute='id') | list }}"
  when:
    - item != "root"
    - cis_disruption_high
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.2.8
    - user
    - system

- name: "5.4.3.1 | Ensure nologin is not listed in /etc/shells"
  lineinfile:
    path: /etc/shells
    regexp: ".*nologin.*"
    state: absent
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.3.1
    - user
    - system

- name: "5.4.3.2 | Ensure default user shell timeout is configured"
  blockinfile:
    create: true
    mode: "0644"
    dest: "{{ item.dest }}"
    state: "{{ item.state }}"
    marker: "# {mark} ANSIBLE MANAGED"
    block: |
      # Set session timeout - CIS ID 5.4.3.2
      TMOUT={{ cis_shell_session_timeout.timeout }}
      readonly TMOUT
      export TMOUT
  with_items:
    - { dest: "{{ cis_shell_session_timeout.file }}", state: present }
    - {
        dest: /etc/profile,
        state: "{{ (cis_shell_session_timeout.file == '/etc/profile') | ternary('present', 'absent') }}",
      }
    - { dest: /etc/bash.bashrc, state: present }
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.3.2
    - user

- name: "5.4.3.3 | Ensure default user umask is configured"
  block:
    - name: "5.4.3.3 | Ensure default user umask is configured"
      shell: grep -E '^session\s+optional\s+pam_umask.so' /etc/pam.d/common-session
      changed_when: false
      failed_when: false
      check_mode: false
      register: cis_5_4_3_3_umask_pam_status

    - name: "5.4.3.3 | Ensure default user umask is configured"
      lineinfile:
        path: /etc/pam.d/common-session
        line: "session optional                        pam_umask.so"
        insertbefore: "^# end of pam-auth-update config"
      when: cis_5_4_3_3_umask_pam_status.stdout | length == 0

    - name: "5.4.3.3 | Ensure default user umask is configured"
      lineinfile:
        path: "{{ item.path }}"
        regexp: '(?i)(umask\s*\d\d\d)'
        line: "{{ item.line }} {{ cis_bash_umask }}"
      with_items:
        - { path: "/etc/bash.bashrc", line: "umask" }
        - { path: "/etc/profile", line: "umask" }
        - { path: "/etc/login.defs", line: "UMASK" }

    - name: "5.4.3.3 | Ensure default user umask is configured"
      lineinfile:
        path: /etc/login.defs
        regexp: "^USERGROUPS_ENAB"
        line: USERGROUPS_ENAB no
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - 5.4.3.3
    - user
